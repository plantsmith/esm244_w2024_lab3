---
title: "Lab 3 Part 1: working with spatial data"
author: "Natalie Smith"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
excecute: 
  echo: true
  message: false
  warning: false
---

```{r}
library (tidyverse)
library(here)
library(broom)

### spatial packages
library(sf)
library(tmap)
```

## Read in our data
```{r}
ca_counties_raw_sf <- read_sf(here('data','ca_counties','CA_Counties_TIGER2016.shp'))
```

Modify dataset
```{r}
ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>% 
  mutate(land_km2 = aland / 1e6) %>% 
  select(county = name, land_km2)
```

Delete geometry
```{r}
ca_counties_df <- ca_counties_sf %>% 
  as.data.frame() %>% 
   select(-geometry)
```

### check the CRS
```{r}
ca_counties_sf %>% st_crs()
ca_counties_sf %>% terra::crs() ### 2 ways to access the same information 
```

Explore it visualize: 

```{r}
plot(ca_counties_sf %>% select(land_km2))
```

or GGplot

```{r}
ggplot()+
  geom_sf(data=ca_counties_sf, aes(fill = land_km2), color = "white", size = 0.1) +
  theme_void()+
  scale_fill_gradientn(colors = c('cyan','blue', 'purple'))
```

## Read in some sesbania records

```{r}
sesbania_sf <- read_sf(here("data","red_sesbania","ds80.shp")) %>% 
  janitor::clean_names()

sesbania_sf %>% st_crs() # the two datasets are in different coordinate 
```
Plot it
```{r}
plot(sesbania_sf %>% select(id))
```

Let's say we want to find the count of red sesbania observed locations in this dataset *by county*. We then want to create a map of all CA counties using fill color to indicate sesbania counts.

##Transform the CRS so records match counties

```{r}
### if you know the EPSG code:
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
### if you don't know the EPSG code:
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))

# Then check it: 
sesbania_3857_sf %>% st_crs()
```


##Let's plot the two together!


```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red")+
  theme_minimal()
```

## Spatial Join! ---- joining defaults to keeping the geometry of the first object, and adds the records of the second where they spatially overlap the first (but drops the geometry of the second)

```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf) #counties over points

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf) #point over counties
```

## Summarize by county

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county.x) %>% 
  summarize(n_records = sum(!is.na(id)))
```

```{r}
ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'grey90', size = 1) +
  scale_fill_gradientn(colors= c('lightgrey', 'orange', 'purple'))+
                         theme_minimal()+
                        labs(fill = "Number of S. punicea records")
```
Choropleth - regular map


### Next Analysis: for the county with the gratest nuber of red sesbania records, make a map of those locations and where they occur within the county. 

```{r}
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>% 
  pull(county.x)

solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county.x %in% county_max)

solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')+
  theme_minimal()
  
```
# Making an interactive map with 'tmap'

```{r}
#| eval: false ### the interactive map makes the HTML huge, so we ask it not to run code
#| include: true

# Set the viewing mode to "interactive" with Tmap
tmap_mode(mode = "view")

# Then make a map (with the polygon fill color updated by variable 'land_km2', updating the color palette to "BuGn"), then add another shape layer for the sesbania records (added as dots):

tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") +
  tm_shape(sesbania_sf) +
  tm_dots()
```

